generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}
datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  // relationMode = "prisma"
  // Since PlanetScale now has foreign keys as a beta feature, can get rid of relationMode
  // https://github.com/prisma/prisma/issues/22266
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String       @id @default(cuid())
  name                  String       @unique
  email                 String       @unique
  emailVerified         DateTime?    @map("email_verified")
  image                 String?
  password              String?
  isTwoFactorEnabled    Boolean      @default(false) @map("is_two_factor_enabled")
  createdAt             DateTime     @default(now()) @map("created_at")
  role                  UserRole     @default(USER)
  twoFactorConfirmation TwoFactorConfirmation?
  banDate               DateTime? @map("ban_date")
  lastUpdateName        DateTime? @map("last_update_name")
  accounts              Account[]
  posts                 Post[]
  albums                Album[]
  favorites             Favorites[]
  reports               Report[]

  @@unique([name, email])
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([provider, providerAccountId])
  @@map("account")
}

model VerificationToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}

model TwoFactorToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_token")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("two_factor_confirmation")
}
model Post {
  id           String  @id @default(cuid())
  publicId     String  @unique @map("public_id")
  userId       String? @map("user_id")
  sourceUrl    String  @unique @map("source_url")
  thumbnailUrl String  @unique @map("thumbnail_url")
  description  String? @db.VarChar(500)
  width        Int?
  height       Int?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  tags         Tag[]
  albums       PostsAlbums[]
  favorites    Favorites[]
  reports      Report[]

  user        User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("post")
}

model Tag {
  id      String @id @default(cuid())
  name    String @unique
  posts   Post[]
  albums  Album[]

  // @@fulltext([name])
  @@map("tag")
}

model Album {
  id          String  @id @default(cuid())
  publicId    String  @unique @map("public_id")
  name        String
  userId      String @map("user_id")
  description String? @db.VarChar(500)
  createdAt   DateTime @default(now()) @map("created_at")
  posts       PostsAlbums[]
  tags        Tag[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("album")
}

model PostsAlbums {
  postId    String @map("post_id")
  albumId   String @map("album_id")
  createdAt DateTime @default(now()) @map("created_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@id([postId, albumId])
  @@map("posts_albums")
}

model Favorites {
  postId    String @map("post_id")
  userId    String @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
  @@map("favorites")
}

enum ReportReason {
  spam
  guidelines
  duplicate
  quality
  explicit
  unrelated
  other
}
model Report {
  id String @id @default(cuid())
  postId  String @map("post_id")
  userId  String @map("user_id")
  reason  ReportReason
  url     String?
  details String?

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("report")
}