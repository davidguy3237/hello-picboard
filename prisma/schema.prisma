generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  // relationMode = "prisma"
  // Since PlanetScale now has foreign keys as a beta feature, can get rid of relationMode
  // https://github.com/prisma/prisma/issues/22266
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String       @id @default(cuid())
  name                  String       @unique
  email                 String       @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  isTwoFactorEnabled    Boolean      @default(false)
  createdAt             DateTime     @default(now())
  role                  UserRole     @default(USER)
  twoFactorConfirmation TwoFactorConfirmation?
  banDate               DateTime?
  lastUpdateName        DateTime?
  accounts              Account[]
  posts                 Post[]
  albums                Album[]
  favorites             PostFavorites[]

  @@unique([name, email])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Post {
  id           String  @id @default(cuid())
  publicId     String  @unique
  userId       String?
  sourceUrl    String  @unique
  thumbnailUrl String  @unique
  description  String? @db.VarChar(500)
  width        Int?
  height       Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tags         Tag[]
  albums       PostAlbums[]
  favorites    PostFavorites[]

  user        User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Tag {
  id      String @id @default(cuid())
  name    String @unique
  posts   Post[]
  albums  Album[]

  @@fulltext([name])
}

model Album {
  id          String  @id @default(cuid())
  publicId    String  @unique
  name        String
  userId      String
  description String? @db.VarChar(500)
  createdAt   DateTime @default(now())
  posts       PostAlbums[]
  tags        Tag[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostAlbums {
  postId String
  albumId String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@id([postId, albumId])
}

model PostFavorites {
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}